// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Subsystems/armSubsystem.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

armSubsystem::armSubsystem() : frc::Subsystem("armSubsystem") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //m_turretMotor.reset(new rev::CANSparkMax(15, rev::CANSparkMax::MotorType::kBrushless));
    //AddChild("m_turretMotor", std::static_pointer_cast<rev::CANSparkMax>(m_turretMotor));
    
    m_S3Motor.reset(new rev::CANSparkMax(16, rev::CANSparkMax::MotorType::kBrushless));
    //AddChild("m_S3Motor", std::static_pointer_cast<rev::CANSparkMax>(m_S3Motor));
    
    m_S2Motor.reset(new rev::CANSparkMax(17, rev::CANSparkMax::MotorType::kBrushless));
    //AddChild("m_S2Motor", std::static_pointer_cast<rev::CANSparkMax>(m_S2Motor));
    
    //m_S1Motor.reset(new rev::CANSparkMax(18, rev::CANSparkMax::MotorType::kBrushless));
    //AddChild("m_S1Motor", std::static_pointer_cast<rev::CANSparkMax>(m_S1Motor));
    
    //m_wristMotor.reset(new rev::CANSparkMax(19, rev::CANSparkMax::MotorType::kBrushless));
    //AddChild("m_wristMotor", std::static_pointer_cast<rev::CANSparkMax>(m_wristMotor));
    
    //m_clawMotor.reset(new rev::CANSparkMax(20, rev::CANSparkMax::MotorType::kBrushless));
    //AddChild("m_clawMotor", std::static_pointer_cast<rev::CANSparkMax>(m_clawMotor));
    
    //PID OBJECTS

    //rev::CANPIDController PID_turret = m_turretMotor->GetPIDController();
    rev::CANPIDController PID_S3 = m_S3Motor->GetPIDController();
    rev::CANPIDController PID_S2 = m_S2Motor->GetPIDController();
    //rev::CANPIDController PID_S1 = m_S1Motor->GetPIDController();
    //rev::CANPIDController PID_wrist = m_wristMotor->GetPIDController();
    //rev::CANPIDController PID_claw = m_clawMotor->GetPIDController();
    

    //ENCODER OBJECTS

    //rev::CANEncoder e_turret = m_turretMotor->GetEncoder();
    rev::CANEncoder e_S3 = m_S3Motor->GetEncoder();
    rev::CANEncoder e_S2 = m_S2Motor->GetEncoder();
    //rev::CANEncoder e_S1 = m_S1Motor->GetEncoder();
    //rev::CANEncoder e_wrist = m_wristMotor->GetEncoder();
    //rev::CANEncoder e_claw = m_clawMotor->GetEncoder();

    double kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void armSubsystem::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    //kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    //PID_wrist->SetP(kP);
    //PID_wrist->SetI(kI);
    //PID_wrist->SetD(kD);
    //PID_wrist->SetIZone(kIz);
    //PID_wrist->SetFF(kFF);
    //PID_wrist->SetOutputRange(kMinOutput, kMaxOutput);

    //kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    //PID_claw->SetP(kP);
    //PID_claw->SetI(kI);
    //PID_claw->SetD(kD);
    //PID_claw->SetIZone(kIz);
    //PID_claw->SetFF(kFF);
    //PID_claw->SetOutputRange(kMinOutput, kMaxOutput);

    //kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    //PID_S1->SetP(kP);
    //PID_S1->SetI(kI);
    //PID_S1->SetD(kD);
    //PID_S1->SetIZone(kIz);
    //PID_S1->SetFF(kFF);
    //PID_S1->SetOutputRange(kMinOutput, kMaxOutput);

    kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    PID_S2->SetP(kP);
    PID_S2->SetI(kI);
    PID_S2->SetD(kD);
    PID_S2->SetIZone(kIz);
    PID_S2->SetFF(kFF);
    PID_S2->SetOutputRange(kMinOutput, kMaxOutput);

    kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    PID_S3->SetP(kP);
    PID_S3->SetI(kI);
    PID_S3->SetD(kD);
    PID_S3->SetIZone(kIz);
    PID_S3->SetFF(kFF);
    PID_S3->SetOutputRange(kMinOutput, kMaxOutput);

    //kP = 0, kI = 0, kD = 0, kIz = 0, kFF = 0, kMaxOutput = 1, kMinOutput = -1;
    //PID_turret->SetP(kP);
    //PID_turret->SetI(kI);
    //PID_turret->SetD(kD);
    //PID_turret->SetIZone(kIz);
    //PID_turret->SetFF(kFF);
    //PID_turret->SetOutputRange(kMinOutput, kMaxOutput);


    
}

void armSubsystem::Periodic() {
    // Put code here to be run every loop

}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


// Put methods for controlling this subsystem
// here. Call these from Commands.

void armSubsystem::ClawAdjust(double adjustClaw) {

}

void armSubsystem::ClawOpen(double clawSP) {

}
	
void armSubsystem::ClawClosed(double clawSP) {


}

void armSubsystem::WristPos0(double wristSP) {

    

}
	
void armSubsystem::WristPos1(double wristSP) {



}

void armSubsystem::WristPos2(double wristSP) {

    //PID_wrist->SetReference(wristSP, rev::ControlType::kPosition);

}

void armSubsystem::WristAdjust(double adjustWrist) {

    //m_wristMotor->Set(adjustWrist);

}

void armSubsystem::S1Pos0(double s1SP) {

}

void armSubsystem::S1Pos1(double s1SP) {

}

void armSubsystem::S1Adjust(double adjustS1) {

}

void armSubsystem::S2Pos0(double s2SP) {

}

void armSubsystem::S2Pos1(double s2SP) {

}

void armSubsystem::S2Pos2(double s2SP) {

}

void armSubsystem::S2Adjust(double adjustS2) {

}

void armSubsystem::S3Pos0(double s3SP) {

    PID_S3->SetReference(s3SP, rev::ControlType::kPosition);


}
	
void armSubsystem::S3Pos1(double s3SP) {

    PID_S3->SetReference(s3SP, rev::ControlType::kPosition);

}
	
void armSubsystem::S3Adjust(double adjust31) {

}

void armSubsystem::TurretSwivel(double adjustTurret) {

}

